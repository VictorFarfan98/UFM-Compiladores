digraph tree {
    "program";
    "['keywords', 'class', 1, 'program']";
    "['ID', 'Program', 1, 'program']";
    "['Delimiter', '{', 2, 'program']";
    "method_dec";
    "['keywords', 'int', 4, 'method_dec']";
    "['ID', 'IF', 4, 'method_dec']";
    "['Delimiter', '(', 4, 'method_dec']";
    "['keywords', 'int', 4, 'method_dec']";
    "['ID', 'val', 4, 'method_dec']";
    "['Delimiter', ')', 4, 'method_dec']";
    "block";
    "['Delimiter', '{', 5, 'block']";
    "var_decl";
    "['keywords', 'boolean', 6, 'var_decl']";
    "['ID', 'b', 6, 'var_decl']";
    "['Delimiter', ';', 6, 'var_decl']";
    "statement";
    "['keywords', 'return', 7, 'statement']";
    "expr";
    "['Delimiter', '(', 7, 'expr']";
    "expr";
    "['ID', 'val', 7, 'expr']";
    "['Operator', '+', 7, 'expr']";
    "expr";
    "['decimal', '1', 7, 'expr']";
    "['Delimiter', ')', 7, 'expr']";
    "['Delimiter', ';', 7, 'statement']";
    "['Delimiter', '}', 8, 'block']";
    "method_dec";
    "['keywords', 'void', 10, 'method_dec']";
    "['ID', 'main', 10, 'method_dec']";
    "['Delimiter', '(', 10, 'method_dec']";
    "['keywords', 'int', 10, 'method_dec']";
    "['ID', 'x', 10, 'method_dec']";
    "['Delimiter', ',', 10, 'method_dec']";
    "['keywords', 'boolean', 10, 'method_dec']";
    "['ID', 'y', 10, 'method_dec']";
    "['Delimiter', ')', 10, 'method_dec']";
    "block";
    "['Delimiter', '{', 11, 'block']";
    "var_decl";
    "['keywords', 'int', 13, 'var_decl']";
    "['ID', 'ern3t', 13, 'var_decl']";
    "['Delimiter', ',', 13, 'var_decl']";
    "['ID', 'i', 13, 'var_decl']";
    "['Delimiter', ',', 13, 'var_decl']";
    "['ID', 'j', 13, 'var_decl']";
    "['Delimiter', ';', 13, 'var_decl']";
    "['keywords', 'int', 14, 'var_decl']";
    "['ID', 'array', 14, 'var_decl']";
    "['Delimiter', ';', 14, 'var_decl']";
    "['keywords', 'boolean', 15, 'var_decl']";
    "['ID', 'hola', 15, 'var_decl']";
    "['Delimiter', ';', 15, 'var_decl']";
    "['keywords', 'boolean', 16, 'var_decl']";
    "['ID', 'thisfortrue', 16, 'var_decl']";
    "['Delimiter', ';', 16, 'var_decl']";
    "statement";
    "location";
    "['ID', 'hola', 17, 'location']";
    "['Operator', '=', 17, 'statement']";
    "expr";
    "['decimal', '10', 17, 'expr']";
    "['Operator', '+', 17, 'expr']";
    "expr";
    "['ID', 'array', 17, 'expr']";
    "['Operator', '+', 17, 'expr']";
    "expr";
    "['decimal', '1', 17, 'expr']";
    "['Delimiter', ';', 17, 'statement']";
    "location";
    "['ID', 'array', 18, 'location']";
    "['Operator', '=', 18, 'statement']";
    "expr";
    "['decimal', '1', 18, 'expr']";
    "['Delimiter', ';', 18, 'statement']";
    "location";
    "['ID', 'array', 19, 'location']";
    "['Delimiter', '[', 19, 'location']";
    "expr";
    "['hexadecimal', '0xa', 19, 'expr']";
    "['Delimiter', ']', 19, 'location']";
    "['Operator', '+=', 19, 'statement']";
    "expr";
    "method_call";
    "['ID', 'IF', 19, 'method_call']";
    "['Delimiter', '(', 19, 'method_call']";
    "['Delimiter', ')', 19, 'method_call']";
    "['Delimiter', ';', 19, 'statement']";
    "['Delimiter', '}', 20, 'block']";
    "['Delimiter', '}', 21, 'program']";
    "program" -> "['keywords', 'class', 1, 'program']";
    "program" -> "['ID', 'Program', 1, 'program']";
    "program" -> "['Delimiter', '{', 2, 'program']";
    "program" -> "method_dec";
    "program" -> "method_dec";
    "program" -> "['Delimiter', '}', 21, 'program']";
    "method_dec" -> "['keywords', 'int', 4, 'method_dec']";
    "method_dec" -> "['ID', 'IF', 4, 'method_dec']";
    "method_dec" -> "['Delimiter', '(', 4, 'method_dec']";
    "method_dec" -> "['keywords', 'int', 4, 'method_dec']";
    "method_dec" -> "['ID', 'val', 4, 'method_dec']";
    "method_dec" -> "['Delimiter', ')', 4, 'method_dec']";
    "method_dec" -> "block";
    "block" -> "['Delimiter', '{', 5, 'block']";
    "block" -> "var_decl";
    "block" -> "statement";
    "block" -> "['Delimiter', '}', 8, 'block']";
    "var_decl" -> "['keywords', 'boolean', 6, 'var_decl']";
    "var_decl" -> "['ID', 'b', 6, 'var_decl']";
    "var_decl" -> "['Delimiter', ';', 6, 'var_decl']";
    "statement" -> "['keywords', 'return', 7, 'statement']";
    "statement" -> "expr";
    "statement" -> "['Delimiter', ';', 7, 'statement']";
    "expr" -> "['Delimiter', '(', 7, 'expr']";
    "expr" -> "expr";
    "expr" -> "['Delimiter', ')', 7, 'expr']";
    "expr" -> "['ID', 'val', 7, 'expr']";
    "expr" -> "['Operator', '+', 7, 'expr']";
    "expr" -> "expr";
    "expr" -> "['decimal', '1', 7, 'expr']";
    "method_dec" -> "['keywords', 'void', 10, 'method_dec']";
    "method_dec" -> "['ID', 'main', 10, 'method_dec']";
    "method_dec" -> "['Delimiter', '(', 10, 'method_dec']";
    "method_dec" -> "['keywords', 'int', 10, 'method_dec']";
    "method_dec" -> "['ID', 'x', 10, 'method_dec']";
    "method_dec" -> "['Delimiter', ',', 10, 'method_dec']";
    "method_dec" -> "['keywords', 'boolean', 10, 'method_dec']";
    "method_dec" -> "['ID', 'y', 10, 'method_dec']";
    "method_dec" -> "['Delimiter', ')', 10, 'method_dec']";
    "method_dec" -> "block";
    "block" -> "['Delimiter', '{', 11, 'block']";
    "block" -> "var_decl";
    "block" -> "statement";
    "block" -> "['Delimiter', '}', 20, 'block']";
    "var_decl" -> "['keywords', 'int', 13, 'var_decl']";
    "var_decl" -> "['ID', 'ern3t', 13, 'var_decl']";
    "var_decl" -> "['Delimiter', ',', 13, 'var_decl']";
    "var_decl" -> "['ID', 'i', 13, 'var_decl']";
    "var_decl" -> "['Delimiter', ',', 13, 'var_decl']";
    "var_decl" -> "['ID', 'j', 13, 'var_decl']";
    "var_decl" -> "['Delimiter', ';', 13, 'var_decl']";
    "var_decl" -> "['keywords', 'int', 14, 'var_decl']";
    "var_decl" -> "['ID', 'array', 14, 'var_decl']";
    "var_decl" -> "['Delimiter', ';', 14, 'var_decl']";
    "var_decl" -> "['keywords', 'boolean', 15, 'var_decl']";
    "var_decl" -> "['ID', 'hola', 15, 'var_decl']";
    "var_decl" -> "['Delimiter', ';', 15, 'var_decl']";
    "var_decl" -> "['keywords', 'boolean', 16, 'var_decl']";
    "var_decl" -> "['ID', 'thisfortrue', 16, 'var_decl']";
    "var_decl" -> "['Delimiter', ';', 16, 'var_decl']";
    "statement" -> "location";
    "statement" -> "['Operator', '=', 17, 'statement']";
    "statement" -> "expr";
    "statement" -> "['Delimiter', ';', 17, 'statement']";
    "statement" -> "location";
    "statement" -> "['Operator', '=', 18, 'statement']";
    "statement" -> "expr";
    "statement" -> "['Delimiter', ';', 18, 'statement']";
    "statement" -> "location";
    "statement" -> "['Operator', '+=', 19, 'statement']";
    "statement" -> "expr";
    "statement" -> "['Delimiter', ';', 19, 'statement']";
    "location" -> "['ID', 'hola', 17, 'location']";
    "expr" -> "['decimal', '10', 17, 'expr']";
    "expr" -> "['Operator', '+', 17, 'expr']";
    "expr" -> "expr";
    "expr" -> "['ID', 'array', 17, 'expr']";
    "expr" -> "['Operator', '+', 17, 'expr']";
    "expr" -> "expr";
    "expr" -> "['decimal', '1', 17, 'expr']";
    "location" -> "['ID', 'array', 18, 'location']";
    "expr" -> "['decimal', '1', 18, 'expr']";
    "location" -> "['ID', 'array', 19, 'location']";
    "location" -> "['Delimiter', '[', 19, 'location']";
    "location" -> "expr";
    "location" -> "['Delimiter', ']', 19, 'location']";
    "expr" -> "['hexadecimal', '0xa', 19, 'expr']";
    "expr" -> "method_call";
    "method_call" -> "['ID', 'IF', 19, 'method_call']";
    "method_call" -> "['Delimiter', '(', 19, 'method_call']";
    "method_call" -> "['Delimiter', ')', 19, 'method_call']";
}
