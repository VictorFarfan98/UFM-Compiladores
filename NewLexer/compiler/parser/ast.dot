digraph tree {
    "program";
    "class";
    "Program";
    "{";
    "method_dec";
    "int";
    "IF";
    "(";
    "int";
    "val";
    ")";
    "block";
    "{";
    "var_decl";
    "boolean";
    "b";
    ";";
    "statement";
    "return";
    "expr";
    "(";
    "expr";
    "val";
    "+";
    "expr";
    "1";
    ")";
    ";";
    "}";
    "method_dec";
    "void";
    "main";
    "(";
    "int";
    "x";
    ",";
    "boolean";
    "y";
    ")";
    "block";
    "{";
    "var_decl";
    "int";
    "ern3t";
    ",";
    "i";
    ",";
    "j";
    ";";
    "int";
    "array";
    ";";
    "boolean";
    "hola";
    ";";
    "boolean";
    "thisfortrue";
    ";";
    "statement";
    "location";
    "hola";
    "=";
    "expr";
    "10";
    "+";
    "expr";
    "array";
    "+";
    "expr";
    "1";
    ";";
    "location";
    "array";
    "=";
    "expr";
    "1";
    ";";
    "location";
    "array";
    "[";
    "expr";
    "0xa";
    "]";
    "+=";
    "expr";
    "method_call";
    "IF";
    "(";
    ")";
    ";";
    "}";
    "}";
    "program" -> "class";
    "program" -> "Program";
    "program" -> "{";
    "program" -> "method_dec";
    "program" -> "method_dec";
    "program" -> "}";
    "method_dec" -> "int";
    "method_dec" -> "IF";
    "method_dec" -> "(";
    "method_dec" -> "int";
    "method_dec" -> "val";
    "method_dec" -> ")";
    "method_dec" -> "block";
    "block" -> "{";
    "block" -> "var_decl";
    "block" -> "statement";
    "block" -> "}";
    "var_decl" -> "boolean";
    "var_decl" -> "b";
    "var_decl" -> ";";
    "statement" -> "return";
    "statement" -> "expr";
    "statement" -> ";";
    "expr" -> "(";
    "expr" -> "expr";
    "expr" -> ")";
    "expr" -> "val";
    "expr" -> "+";
    "expr" -> "expr";
    "expr" -> "1";
    "method_dec" -> "void";
    "method_dec" -> "main";
    "method_dec" -> "(";
    "method_dec" -> "int";
    "method_dec" -> "x";
    "method_dec" -> ",";
    "method_dec" -> "boolean";
    "method_dec" -> "y";
    "method_dec" -> ")";
    "method_dec" -> "block";
    "block" -> "{";
    "block" -> "var_decl";
    "block" -> "statement";
    "block" -> "}";
    "var_decl" -> "int";
    "var_decl" -> "ern3t";
    "var_decl" -> ",";
    "var_decl" -> "i";
    "var_decl" -> ",";
    "var_decl" -> "j";
    "var_decl" -> ";";
    "var_decl" -> "int";
    "var_decl" -> "array";
    "var_decl" -> ";";
    "var_decl" -> "boolean";
    "var_decl" -> "hola";
    "var_decl" -> ";";
    "var_decl" -> "boolean";
    "var_decl" -> "thisfortrue";
    "var_decl" -> ";";
    "statement" -> "location";
    "statement" -> "=";
    "statement" -> "expr";
    "statement" -> ";";
    "statement" -> "location";
    "statement" -> "=";
    "statement" -> "expr";
    "statement" -> ";";
    "statement" -> "location";
    "statement" -> "+=";
    "statement" -> "expr";
    "statement" -> ";";
    "location" -> "hola";
    "expr" -> "10";
    "expr" -> "+";
    "expr" -> "expr";
    "expr" -> "array";
    "expr" -> "+";
    "expr" -> "expr";
    "expr" -> "1";
    "location" -> "array";
    "expr" -> "1";
    "location" -> "array";
    "location" -> "[";
    "location" -> "expr";
    "location" -> "]";
    "expr" -> "0xa";
    "expr" -> "method_call";
    "method_call" -> "IF";
    "method_call" -> "(";
    "method_call" -> ")";
}
