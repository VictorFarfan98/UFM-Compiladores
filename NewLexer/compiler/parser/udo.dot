digraph tree {
    "program";
    "class";
    "Program";
    "{";
    "method_dec";
    "void";
    "main";
    "(";
    ")";
    "block";
    "{";
    "var_decl";
    "int";
    "i";
    ";";
    "statement";
    "for";
    "i";
    "=";
    "expr";
    "1";
    ",";
    "expr";
    "i";
    "<";
    "expr";
    "25";
    "block";
    "{";
    "var_decl";
    "int";
    "j";
    ";";
    "statement";
    "if";
    "(";
    "expr";
    "true";
    ")";
    "block";
    "{";
    "var_decl";
    "statement";
    "break";
    ";";
    "}";
    "}";
    "method_call";
    "callout";
    "(";
    "\"\\tThis is my program!\\n\"";
    ")";
    ";";
    "}";
    "}";
    "program" -> "class";
    "program" -> "Program";
    "program" -> "{";
    "program" -> "method_dec";
    "program" -> "}";
    "method_dec" -> "void";
    "method_dec" -> "main";
    "method_dec" -> "(";
    "method_dec" -> ")";
    "method_dec" -> "block";
    "block" -> "{";
    "block" -> "var_decl";
    "block" -> "statement";
    "block" -> "}";
    "var_decl" -> "int";
    "var_decl" -> "i";
    "var_decl" -> ";";
    "statement" -> "for";
    "statement" -> "i";
    "statement" -> "=";
    "statement" -> "expr";
    "statement" -> ",";
    "statement" -> "expr";
    "statement" -> "block";
    "statement" -> "method_call";
    "statement" -> ";";
    "expr" -> "1";
    "expr" -> "i";
    "expr" -> "<";
    "expr" -> "expr";
    "expr" -> "25";
    "block" -> "{";
    "block" -> "var_decl";
    "block" -> "statement";
    "block" -> "}";
    "var_decl" -> "int";
    "var_decl" -> "j";
    "var_decl" -> ";";
    "statement" -> "if";
    "statement" -> "(";
    "statement" -> "expr";
    "statement" -> ")";
    "statement" -> "block";
    "expr" -> "true";
    "block" -> "{";
    "block" -> "var_decl";
    "block" -> "statement";
    "block" -> "}";
    "statement" -> "break";
    "statement" -> ";";
    "method_call" -> "callout";
    "method_call" -> "(";
    "method_call" -> "\"\\tThis is my program!\\n\"";
    "method_call" -> ")";
}
